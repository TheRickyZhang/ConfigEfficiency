let mapleader = " "

" Share a clipboard
set clipboard=unnamedPlus

" Delete without overwriting the default register
nmap <leader>d "_d
vmap <leader>d "_d

" Smart paste
xmap <leader>p "_dP

" Keep cursor centered
nmap <C-d> <C-d>zz
nmap <C-u> <C-u>zz
nmap n nzzv
nmap N Nzzv

" Quick project-wide search & replace of word under cursor (enter word)
nmap <leader>s :%s/\<<C-r><C-w>\>/<C-r><C-w>/gI<Left><Left><Left>

" Convenient built-in functionalities
set surround       " Use s in ysiw, cs, (visual)S for operating on surrounding characters
set incsearch
set ignorecase     " case-insensitive by default
set smartcase      " but case-sensitive if you type a capital letter

" Toggle highlighting
nnoremap <leader>h :set hlsearch!<CR>

" J -> use JetBrain's smarter line join
set clipboard^=ideaputset ideajoin

nnoremap ds d/[A-Z]<CR>

" map <leader> keys to arrows
nnoremap <silent> <leader>e <Up>
nnoremap <silent> <leader>n <Down>
nnoremap <silent> <leader>m <Left>
nnoremap <silent> <leader>i <Right>

" brace delimits
nnoremap <silent> <leader>v V$%
nnoremap <silent> <leader>y /\{<CR>y%
nnoremap <silent> <leader>c /\{<CR>c%
nnoremap <silent> d% /\{<CR>d%

" introduce _{word} with w, b, f, ge to mean a word as defined in CamelCase
nnoremap <silent> <leader>w /\u<CR>
onoremap <silent> <leader>w /\u<CR>
xnoremap <silent> <leader>w /\u<CR>

nnoremap <silent> <leader>b ?\u<CR>
onoremap <silent> <leader>b ?\u<CR>
xnoremap <silent> <leader>b ?\u<CR>

nnoremap <silent> <leader>e /\u<CR>h
onoremap <silent> <leader>e /\u<CR>h
xnoremap <silent> <leader>e /\u<CR>h

nnoremap <silent> <leader>ge ?\u<CR>l
onoremap <silent> <leader>ge ?\u<CR>l
xnoremap <silent> <leader>ge ?\u<CR>l

" Build in comments into vim (Removed since no uncommenting feature yet)
" nnoremap <silent> <C-/> I//<Space><Esc>
" vnoremap <silent> <C-/> :s/^\/// /<CR>gv

function! s:SelectToNextCharInput()
let str = input('Select to next char: ')
if empty(str) | return | endif
let c = str[0]
normal! mz
execute "normal! /\V" . escape(c, '\/') . "\<CR>"
normal! v`z
endfunction
nnoremap <silent> <leader>v :call <SID>SelectToNextCharInput()<CR>

" Have * search for current visual selection literally
xnoremap * :<C-u>call VSetSearch()<CR>/<C-R>=@/<CR><CR>
xnoremap # :<C-u>call VSetSearch()<CR>?<C-R>=@/<CR><CR>

function! VSetSearch()
let temp = @s
normal! gv"sy
let @/ = '\V' . substitute( escape(@s, '\/'), '\n', '\\n', 'g' )
let @s = temp
endfunction
